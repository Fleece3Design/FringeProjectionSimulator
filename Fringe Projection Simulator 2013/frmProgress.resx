<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHh0AAAEACAA8CAAAFgAAACgAAAAeAAAAOgAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFxYXAB4pMwAhKjMAMzEzADU0NQB2V0EAZmVjAI0wAACTNwAAlToAAJY8AQCZQgEAm0QCALBr
        OwDJawAAzHEAAM12AQDNcgYAznYEAM54AQDPeAgA0n4UAACfAAAGngYAB6IHAAihCAAMpAwAE6YTABSn
        FAAZqRkAHaodACGrIQAirCIAJK0kADCuMAA9tz0Aa48CAGuRAABskgAAcpQCAHaaAQB4mwIAeZwKAHaD
        dgBgxWAAcMpwAIOjHQCMqj0AlK8/AJSxOADRgRkA1YopANaMLADXkDMAl7FFAI+YcAC6iGUAzZ5+AOqw
        YQDpsWQAudFrALzPfQABALcAAwC5AAQDuQANALsADwG8ABABvAAkH8IAJyTMAAAx7wAGO/AABzzwAAg+
        8AAMQPEAD0TxABBE8QAZS/kAG075ABxP+QAhUvYAUEnUAG1p2wB8eN8AQ2z0AJUClQCWBJYAmAeYAJgK
        mACaD5oAmxCbAIV/3QCDfegAwmLCANVu1QDofegAAIH/AAGG/wAFhv8AAoj/ABaT/wAynP8APKH/AGSF
        8gB8l/QAcpL5AF2y/wBpxP8Aesn/AJWQiwCgoJwAg4C5ALa3tgC4uLIAz6SHAOKpgwCb2psA8sWOAPnE
        nwDtzaAA9tK3APTbuwD32LwAnZ3AAIaB3gC8u8gAi4fyAJSP+QCJpPkAsb3oAKK7/wDMhMwA05bTANSZ
        1ADDv8QA16DXANyq3AD5vPkAgM7/AL3I7QC9zfsAqtj/AMTDxADDw8kAyMrKANjX2ADf/98A/+PQAO/Y
        7wD/3f8AyOr/AP//9gD9//8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAmpqampqampqUOXOZmpqampqampZXj5qampqampqaAACampqampqamnkMDAsJBpqampqKV1tW
        BJqampqampoAAJqampqampqaeQwMDAwNCG6alVZbW1tgmpqampqamgAAmpqampqampp5DQwMDAwMCpia
        WFtbW1cFmpqampqaAACampqampqamnsLDAwMDAw6mppeW1tbW5mampqampoAAJqampqampqampqaDgwN
        dJqamppZW1taX5qampqamgAAmpqamno1EhA7mpqamneampqamlZbW1tZmpqampqaAACamnYPFBQUFDya
        mpqampqampqahIWGiImaXH19fXwAAJo2FBQUFBQUPJqampqampqampqampqamppCRERDcAAAmhMUFBQU
        FBQ8mpqampqampqampqampqaf0REREJ+AACamhYRERA0eJqampqampqampqampqamppAREJCQZoAAJqa
        mhUzB5qampqampqampqampqampqaRURERERSmgAAmpqampqampqampqampqampqampqamppTREREP5Ca
        AACampqaJYeampqampqampqampqampqamppdRESAmpoAAJqamjIqJnKampqampqampqampqampqamppU
        RpqamgAAmpo+KSoqJ2+ampqampqampqampqampqampqampqaAACamispKSkpPZqampqampqampqampqa
        mpqagUiDmpoAAJqaKSoqKiiampqampqampqampqampqZjVVKTUtpmgAAmpopKiopOJqampqampqampqa
        mpqamk9NTU1NTUxoAACaLyoqKieampqampqampqampqampqaUE1NTU1NTGoAAJo3MTExMJotLi4udZqa
        mpqampqamppQTU1NTUeMmgAAmpqampqamhofHx8kmpqampqLkZqamk5KSVGCmpqaAACampqampqaGSAg
        IBwFmpqaZmRjl44AmpqampqampoAAJqampqampojICAgIJKammdkZGRiY2UDmpqampqamgAAmpqampqa
        mpMiICAgGAFsZGRkZGRkZAKampqampqaAACampqampqamhcgICAbLJptYWRkZGRkApqampqampoAAJqa
        mpqampqamiEgHXGampqaZmFiZGQCmpqampqamgAAmpqampqampqaLR6ampqampqampprZwOampqampqa
        AACampqampqampqampqampqampqampqampqampqampoAAP8P4/z/A8H8/wCB/P8AQPz/AMD8/+Hg/PB7
        4PzAf+CAgH//gIB//wDA//8E4//+BP///gTz//8M4f//nMD///zA//+Mwf/8BMH//ACD//wAgg/8BP4P
        nBz+BwP8/gYB/P4AAfz/AgH8/4eB/P+f8fz////8
</value>
  </data>
</root>